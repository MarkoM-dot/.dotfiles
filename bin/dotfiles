#!/usr/bin/env bash
set -o errexit

EXE_DIR=$( dirname "$( realpath "${0}")")
REPO_DIR=$(dirname "$EXE_DIR")
SSH_DIR="$HOME/.ssh"
USER=$( whoami )
USER_GROUP=$(id -gn "$USER" )

fedora() {
    if ! [ -x "$(command -v ansible)" ]; then
        printf "\n\nInstalling ansible...\n\n"
        sudo dnf update -y
        sudo dnf install ansible -y
    fi

    if ! [ -x "$( command -v ssh-keygen )" ]; then
        sudo dnf install openssh -y
    fi
}

debian() {
    if ! [ -x "$(command -v ansible)" ]; then
        printf "\n\nInstalling ansible...\n\n"
        sudo apt update -y
        sudo apt install software-properties-common -y
        sudo add-apt-repository --yes --update ppa:ansible/ansible
        sudo apt install -y ansible
    fi
}

arch() {
    echo "Arch btw"
}

declare -A osInfo

osInfo["fedora-release"]=fedora
osInfo["debian_version"]=debian
osInfo["arch-release"]=arch

OS=$( uname )
found_distro=false
case $OS in
    'Linux')
        for distro in "${!osInfo[@]}"; do
            if [[ -f "/etc/"$distro ]]; then
                printf "\n\nIdentified: %s\n\n" "$distro"
                ${osInfo[$distro]}
                found_distro=true
                break
            fi
        done
        if [ "$found_distro" = false ]; then
            echo "Could not find Linux distribution..."
            exit 1
        fi;;
    'Darwin')
        if ! [ -x "$(command -v brew)" ]; then
            curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh
        fi
        if ! [ -x "$(command -v ansible)" ]; then
            brew install ansible
        fi;;
    *)
        printf "Program not configured for %s" "$OS"
        exit 1;;
esac

# generate an ssh key if nonexistent
if ! [ -f "$SSH_DIR/id_rsa" ]; then
    printf "\n\nGenerating ssh keys...\n\n"

    mkdir -p "$SSH_DIR"

    chmod 700 "$SSH_DIR"

    ssh-keygen -b 4096 -t rsa -f "$SSH_DIR/id_rsa" -N "" -C "USER@HOSTNAME"

    cat "$SSH_DIR/id_rsa.pub" >> "$SSH_DIR/authorized_keys"

    chmod 600 "$SSH_DIR/authorized_keys"
fi

# git pull will only work outside of test environment
if [ -z "$TEST" ]; then
    printf "\n\nPulling most recent dotfiles\n\n"
    cd "$REPO_DIR"
    git pull
fi

printf "\n\nRun Ansible playbook...\n\n"
ansible-playbook "$REPO_DIR/main.yml" -i "$REPO_DIR/inventory" --ask-become-pass --extra-vars "current_user=$USER current_group=$USER_GROUP" -v

printf "\n\nFinished Ansible playbook!\n\n"

if ! [ -x "$(command -v stow)" ]; then
    printf "\n\nYou require stow to create symbolic links...\n\n"
    exit 1
fi

printf "\n\nExecute Stow...\n\n"
stow . -d "$REPO_DIR" -t ~

printf "\n\nSource bashrc\n\n"
. ~/.bashrc
